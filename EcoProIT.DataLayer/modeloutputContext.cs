#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EcoProIT.DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="C:\\Users\\jonan\\AppData\\Local\\Temp\\modeloutput.sdf")]
	public partial class modeloutputContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertConsumableBase(ConsumableBase instance);
    partial void UpdateConsumableBase(ConsumableBase instance);
    partial void DeleteConsumableBase(ConsumableBase instance);
    partial void InsertConsumablesEmission(ConsumablesEmission instance);
    partial void UpdateConsumablesEmission(ConsumablesEmission instance);
    partial void DeleteConsumablesEmission(ConsumablesEmission instance);
    partial void InsertEmissions(Emissions instance);
    partial void UpdateEmissions(Emissions instance);
    partial void DeleteEmissions(Emissions instance);
    #endregion
		
		public modeloutputContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public modeloutputContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public modeloutputContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public modeloutputContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ConsumableBase> ConsumableBase
		{
			get
			{
				return this.GetTable<ConsumableBase>();
			}
		}
		
		public System.Data.Linq.Table<ConsumablesEmission> ConsumablesEmission
		{
			get
			{
				return this.GetTable<ConsumablesEmission>();
			}
		}
		
		public System.Data.Linq.Table<Emissions> Emissions
		{
			get
			{
				return this.GetTable<Emissions>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class ConsumableBase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Unit;
		
		private EntitySet<ConsumablesEmission> _ConsumablesEmission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    #endregion
		
		public ConsumableBase()
		{
			this._ConsumablesEmission = new EntitySet<ConsumablesEmission>(new Action<ConsumablesEmission>(this.attach_ConsumablesEmission), new Action<ConsumablesEmission>(this.detach_ConsumablesEmission));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(2000)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(1000)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConsRel", Storage="_ConsumablesEmission", ThisKey="Id", OtherKey="Consumable", DeleteRule="NO ACTION")]
		public EntitySet<ConsumablesEmission> ConsumablesEmission
		{
			get
			{
				return this._ConsumablesEmission;
			}
			set
			{
				this._ConsumablesEmission.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConsumablesEmission(ConsumablesEmission entity)
		{
			this.SendPropertyChanging();
			entity.ConsumableBase = this;
		}
		
		private void detach_ConsumablesEmission(ConsumablesEmission entity)
		{
			this.SendPropertyChanging();
			entity.ConsumableBase = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class ConsumablesEmission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Consumable;
		
		private int _Emission;
		
		private System.Nullable<double> _Value;
		
		private EntityRef<ConsumableBase> _ConsumableBase;
		
		private EntityRef<Emissions> _Emissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConsumableChanging(int value);
    partial void OnConsumableChanged();
    partial void OnEmissionChanging(int value);
    partial void OnEmissionChanged();
    partial void OnValueChanging(System.Nullable<double> value);
    partial void OnValueChanged();
    #endregion
		
		public ConsumablesEmission()
		{
			this._ConsumableBase = default(EntityRef<ConsumableBase>);
			this._Emissions = default(EntityRef<Emissions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Consumable", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Consumable
		{
			get
			{
				return this._Consumable;
			}
			set
			{
				if ((this._Consumable != value))
				{
					if (this._ConsumableBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConsumableChanging(value);
					this.SendPropertyChanging();
					this._Consumable = value;
					this.SendPropertyChanged("Consumable");
					this.OnConsumableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emission", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Emission
		{
			get
			{
				return this._Emission;
			}
			set
			{
				if ((this._Emission != value))
				{
					if (this._Emissions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmissionChanging(value);
					this.SendPropertyChanging();
					this._Emission = value;
					this.SendPropertyChanged("Emission");
					this.OnEmissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float")]
		public System.Nullable<double> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConsRel", Storage="_ConsumableBase", ThisKey="Consumable", OtherKey="Id", IsForeignKey=true)]
		public ConsumableBase ConsumableBase
		{
			get
			{
				return this._ConsumableBase.Entity;
			}
			set
			{
				ConsumableBase previousValue = this._ConsumableBase.Entity;
				if (((previousValue != value) 
							|| (this._ConsumableBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConsumableBase.Entity = null;
						previousValue.ConsumablesEmission.Remove(this);
					}
					this._ConsumableBase.Entity = value;
					if ((value != null))
					{
						value.ConsumablesEmission.Add(this);
						this._Consumable = value.Id;
					}
					else
					{
						this._Consumable = default(int);
					}
					this.SendPropertyChanged("ConsumableBase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmisRel", Storage="_Emissions", ThisKey="Emission", OtherKey="Id", IsForeignKey=true)]
		public Emissions Emissions
		{
			get
			{
				return this._Emissions.Entity;
			}
			set
			{
				Emissions previousValue = this._Emissions.Entity;
				if (((previousValue != value) 
							|| (this._Emissions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Emissions.Entity = null;
						previousValue.ConsumablesEmission.Remove(this);
					}
					this._Emissions.Entity = value;
					if ((value != null))
					{
						value.ConsumablesEmission.Add(this);
						this._Emission = value.Id;
					}
					else
					{
						this._Emission = default(int);
					}
					this.SendPropertyChanged("Emissions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Emissions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Unit;
		
		private EntitySet<ConsumablesEmission> _ConsumablesEmission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    #endregion
		
		public Emissions()
		{
			this._ConsumablesEmission = new EntitySet<ConsumablesEmission>(new Action<ConsumablesEmission>(this.attach_ConsumablesEmission), new Action<ConsumablesEmission>(this.detach_ConsumablesEmission));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(2000)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(100)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmisRel", Storage="_ConsumablesEmission", ThisKey="Id", OtherKey="Emission", DeleteRule="NO ACTION")]
		public EntitySet<ConsumablesEmission> ConsumablesEmission
		{
			get
			{
				return this._ConsumablesEmission;
			}
			set
			{
				this._ConsumablesEmission.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConsumablesEmission(ConsumablesEmission entity)
		{
			this.SendPropertyChanging();
			entity.Emissions = this;
		}
		
		private void detach_ConsumablesEmission(ConsumablesEmission entity)
		{
			this.SendPropertyChanging();
			entity.Emissions = null;
		}
	}
}
#pragma warning restore 1591
